@page "/transactions"
@using Brello.Models;
@using Brello.Services;
@inject Brello.Services.TransactionService TransactionService

<h3 class="mb-4">Add Transaction</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @successMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<form @onsubmit="HandleTransactionSubmit" class="mb-5">
    <div class="mb-3">
        <label for="transactionAmount" class="form-label">Amount</label>
        <input type="number" class="form-control" id="transactionAmount" @bind="transactionModel.Amount" required>
    </div>
    <div class="mb-3">
        <label for="transactionDescription" class="form-label">Remarks</label>
        <input type="text" class="form-control" id="transactionDescription" @bind="transactionModel.Description" required>
    </div>
    <div class="mb-3">
        <label for="transactionType" class="form-label">Transaction Type</label>
        <select class="form-select" id="transactionType" @bind="transactionModel.TransactionType" required>
            <option value="@(TransactionType.Credit)">Credit</option>
            <option value="@(TransactionType.Debit)">Debit</option>
        </select>
    </div>
    <div class="mb-3">
        <label for="transactionDate" class="form-label">Transaction Date</label>
        <InputDate id="transactionDate" class="form-control" @bind-Value="transactionModel.TransactionDate" required />
    </div>
    <div class="mb-3">
        <label for="transactionTag" class="form-label">Tag</label>
        <input type="text" class="form-control" id="transactionTag" @bind="transactionModel.Tag">
    </div>
    <button type="submit" class="btn btn-primary">Add Transaction</button>
</form>

<h4>Transaction History</h4>
@if (transactions != null && transactions.Count > 0)
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Date</th>
                <th>Remarks</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Tag</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.TransactionDate.ToString("yyyy-MM-dd")</td>
                    <td>@transaction.Description</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.TransactionType</td>
                    <td>@transaction.Tag</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransaction(transaction.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No transactions found.</p>
}

<style>
    form {
        background: #f8f9fa;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    h3, h4 {
        color: #343a40;
    }

    table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

        table th, table td {
            padding: 10px;
            text-align: left;
            border: 1px solid #ddd;
        }

        table th {
            background-color: #343a40;
            color: #fff;
            font-weight: bold;
        }

        table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        table tr:hover {
            background-color: #e9ecef;
        }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }
</style>

@code {
    private Transaction transactionModel = new Transaction();
    private List<Transaction> transactions = new();
    private string successMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetTransactionsAsync();
    }

    private async Task HandleTransactionSubmit()
    {
        try
        {
            await TransactionService.AddTransactionAsync(
                transactionModel.Amount,
                transactionModel.Description,
                transactionModel.TransactionType,
                transactionModel.TransactionDate,
                transactionModel.Tag);

            transactions.Add(new Transaction
                {
                    Amount = transactionModel.Amount,
                    Description = transactionModel.Description,
                    TransactionType = transactionModel.TransactionType,
                    TransactionDate = transactionModel.TransactionDate,
                    Tag = transactionModel.Tag
                });

            successMessage = "Transaction added successfully.";
            errorMessage = string.Empty;

            transactionModel = new Transaction();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding transaction: {ex.Message}";
            successMessage = string.Empty;
        }
    }

    private async Task DeleteTransaction(int transactionId)
    {
        try
        {
            await TransactionService.DeleteTransactionAsync(transactionId);
            transactions = await TransactionService.GetTransactionsAsync();

            successMessage = "Transaction deleted successfully.";
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting transaction: {ex.Message}";
            successMessage = string.Empty;
        }
    }
}
