@page "/debt-history"
@using Brello.Models
@using Brello.Services
@inject DebtService DebtService

<div class="container mt-4">
    <h3 class="text-center mb-4">Debt History</h3>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="filter-container row mb-4">
        <div class="col-md-6">
            <label for="statusFilter" class="form-label">Filter by Status:</label>
            <select id="statusFilter" class="form-select" @bind="SelectedStatus">
                <option value="">All</option>
                <option value="Pending">Pending</option>
                <option value="Paid">Paid</option>
            </select>
        </div>
    </div>

    @if (filteredDebts == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (filteredDebts.Count == 0)
    {
        <p class="text-center text-muted">No debts recorded for the selected status.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered align-middle">
                <thead class="table-primary">
                    <tr>
                        <th>Amount</th>
                        <th>Source</th>
                        <th>Due Date</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in filteredDebts)
                    {
                        <tr>
                            <td>@debt.Amount</td>
                            <td>@debt.Source</td>
                            <td>@debt.DueDate.ToString("yyyy-MM-dd")</td>
                            <td>
                                <select class="form-select form-select-sm" @bind="debt.Status">
                                    <option value="Pending">Pending</option>
                                    <option value="Paid">Paid</option>
                                </select>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="() => UpdateDebtStatus(debt)">Update</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<DebtModel> debts;
    private List<DebtModel> filteredDebts;

    private string _selectedStatus = string.Empty;
    private string SelectedStatus
    {
        get => _selectedStatus;
        set
        {
            if (_selectedStatus != value)
            {
                _selectedStatus = value;
                ApplyFilter(); // Reapply the filter whenever the selection changes
            }
        }
    }

    private string successMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDebtHistory();
    }

    private async Task LoadDebtHistory()
    {
        var debtEntities = await DebtService.GetDebtsAsync();

        debts = debtEntities.Select(debt => new DebtModel
        {
            Id = debt.Id,
            Source = debt.Source,
            Amount = debt.Amount,
            DueDate = debt.DebtDueDate,
            Status = debt.Status
        }).ToList();

        ApplyFilter();
    }

    private void ApplyFilter()
    {
        filteredDebts = string.IsNullOrWhiteSpace(SelectedStatus)
            ? debts // Show all debts if no filter is selected
            : debts.Where(debt => debt.Status == SelectedStatus).ToList();
    }

    private async Task UpdateDebtStatus(DebtModel debt)
    {
        try
        {
            bool success = await DebtService.UpdateDebtStatusAsync(debt.Id, debt.Status);
            if (success)
            {
                successMessage = "Debt status updated successfully.";
                errorMessage = string.Empty;
                await LoadDebtHistory(); // Reload the list to reflect changes
            }
            else
            {
                errorMessage = "Failed to update debt status.";
                successMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating debt status: {ex.Message}";
            successMessage = string.Empty;
        }
    }

    public class DebtModel
    {
        public int Id { get; set; }
        public string Source { get; set; }
        public decimal Amount { get; set; }
        public DateTime DueDate { get; set; }
        public string Status { get; set; }
    }
}

<style>
    .filter-container {
        display: flex;
        align-items: center;
    }

    .filter-container label {
        margin-right: 10px;
        font-weight: bold;
    }

    .table th,
    .table td {
        text-align: center;
        vertical-align: middle;
    }
</style>
