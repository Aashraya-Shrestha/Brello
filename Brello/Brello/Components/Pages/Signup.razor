@page "/signup"
@layout Brello.Components.Layout.EmptyLayout
@using Brello.Services;
@using Brello.Models;
@inject AuthService AuthService
@inject NavigationManager Navigation

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg p-4" style="width: 25rem; border-radius: 10px;">
        <h3 class="text-center text-success mb-4">Sign Up</h3>
        <form @onsubmit="HandleSignup">
            <div class="mb-3">
                <label class="form-label">Email</label>
                <input type="email" class="form-control" placeholder="Enter your email" @bind="user.Username" required />
                <div class="form-text">We'll never share your email with anyone else.</div>
            </div>
            <div class="mb-3">
                <label class="form-label">Password</label>
                <input type="password" class="form-control" placeholder="Enter your password" @bind="user.Password" required />
            </div>
            <div class="mb-3">
                <label class="form-label">Preferred Currency</label>
                <select class="form-control" @bind="user.PreferredCurrency" required>
                    <option value="NRS">Nepalese Rupee (NRS)</option>
                    <option value="USD">US Dollar (USD)</option>
                    <option value="CAD">Canadian Dollar (CAD)</option>
                    <option value="AUD">Australian Dollar (AUD)</option>
                </select>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger text-center" role="alert">
                    @errorMessage
                </div>
            }
            <div class="d-grid">
                <button type="submit" class="btn btn-success">Sign Up</button>
            </div>
            <p class="text-center mt-3">
                Already have an account? <a href="/" class="text-success">Login!</a>
            </p>
        </form>
    </div>
</div>

@code {
    private User user = new User();
    private string? errorMessage;

    private async Task HandleSignup()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(user.Username) || string.IsNullOrWhiteSpace(user.Password))
            {
                errorMessage = "Username and Password cannot be empty.";
                return;
            }

            if (string.IsNullOrWhiteSpace(user.PreferredCurrency) || user.PreferredCurrency.Length != 3)
            {
                errorMessage = "Please select a valid currency.";
                return;
            }

            var success = await AuthService.RegisterAsync(user.Username, user.Password, user.PreferredCurrency);

            if (success)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Username already exists. Please try again with a different username.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
